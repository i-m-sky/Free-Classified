DELIMITER //

CREATE FUNCTION getNodePostCount(IN cid INT, IN cdate DATE)
BEGIN
	WITH RECURSIVE generation AS ( SELECT id, parent_id, 0 AS generation_number FROM categories WHERE parent_id =cid UNION ALL SELECT child.id, child.parent_id, generation_number+1 AS generation_number FROM categories child JOIN generation g ON g.id = child.parent_id ) SELECT count(id) as total FROM posts WHERE status='active' AND active_date >=cdate AND category_id IN (SELECT id FROM generation);
END //

DELIMITER ;


DELIMITER $$

CREATE FUNCTION func_getNodePostCount(
	cid INT,
    cdate DATE
) 
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE count INT;

   SET count = IFNULL((WITH RECURSIVE generation AS ( SELECT id, parent_id, 0 AS generation_number FROM categories WHERE parent_id =cid UNION ALL SELECT child.id, child.parent_id, generation_number+1 AS generation_number FROM categories child JOIN generation g ON g.id = child.parent_id ) SELECT count(id) as total FROM posts WHERE status='active' AND active_date >=cdate AND ( category_id IN (SELECT id FROM generation) OR category_id=cid ) ),0);

	-- return the customer level
	RETURN (count);
END$$
DELIMITER ;




DELIMITER $$

CREATE FUNCTION func_getNodeIds(
	cid INT
) 
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
    DECLARE ids VARCHAR(255);

   SET ids = IFNULL((
    WITH RECURSIVE generation AS ( SELECT id, parent_id, 0 AS generation_number FROM categories WHERE parent_id =cid UNION ALL SELECT child.id, child.parent_id, generation_number+1 AS generation_number FROM categories child JOIN generation g ON g.id = child.parent_id )SELECT GROUP_CONCAT(id) FROM generation),'');

	-- return the customer level
	RETURN (ids);
END$$
DELIMITER ;


.view-few-cat {
	display: none;
}

.view-few-loc {
	display: none;
}

FTP password: O73rH$5Me0sd

JAnakpuri@@107



===================================


DELIMITER $$

CREATE FUNCTION func_getNodePostCountByUserId (
	cid INT,
    cdate DATE,
	userId VARCHAR(20)
) 
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE count INT;

   SET count = IFNULL((WITH RECURSIVE generation AS ( SELECT id, parent_id, 0 AS generation_number FROM categories WHERE parent_id =cid UNION ALL SELECT child.id, child.parent_id, generation_number+1 AS generation_number FROM categories child JOIN generation g ON g.id = child.parent_id ) SELECT count(id) as total FROM posts WHERE status='active' AND active_date >=cdate AND  user_id=userId AND ( category_id IN (SELECT id FROM generation) OR category_id=cid ) ),0);

	-- return the customer level
	RETURN (count);
END$$
DELIMITER ;